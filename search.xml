<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>布隆过滤器原理</title>
    <url>/2024/10/20/BloomFilter/</url>
    <content><![CDATA[<h3 id="1-什么是布隆过滤器"><a href="#1-什么是布隆过滤器" class="headerlink" title="1. 什么是布隆过滤器"></a>1. 什么是布隆过滤器</h3><p>以下定义来至百度百科：</p>
<ul>
<li>布隆过滤器（英语：Bloom Filter）是1970年由伯顿·霍华德·布隆（Burton Howard Bloom）提出的。它实际上是由一个很长的二进制向量和一系列随机映射函数组成的。布隆过滤器可以用于检索一个元素是否在一个集合中。 它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</li>
</ul>
<p>由此我们可知布隆过滤器主要由两个部分组成：位数组和多个映射函数（哈希函数）。</p>
<ul>
<li><strong>位数组</strong>：初始化为一组固定长度的二进制位（默认全为 0）。</li>
<li><strong>哈希函数</strong>：使用多个独立的哈希函数（如 k 个），对输入元素进行哈希处理，生成 k 个哈希值。</li>
</ul>
<p><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241027235221.png"></p>
<p>Bloom Filter 使用一个较大的bit数组进行保存所有的数据，数组中的每个元素都只占用1 bit，并且每个元素只能是 0 或者 1，这也是布隆过滤器节省内存的核心所在。<br>我们设想1000w个元素，它只需要 <strong>1000000Bit &#x2F; 8 &#x3D; 125000 Byte &#x3D; 125000 &#x2F; 1024 KB ≈ 122 KB</strong> 的空间。显然它非常的节省内存，但是如果所有的二进制位数全部占完，接下不管来什么它都会返回1，也就是说添加到集合中的元素越多，误报的可能性就越大</p>
<h3 id="2-布隆过滤器的原理介绍"><a href="#2-布隆过滤器的原理介绍" class="headerlink" title="2. 布隆过滤器的原理介绍"></a>2. 布隆过滤器的原理介绍</h3><p><strong>插入操作</strong>：</p>
<ol>
<li>当插入一个元素时，使用 k 个哈希函数计算出 k 个哈希值。</li>
<li>将这 k 个哈希值对应的位数组的索引位置设置为 1。</li>
</ol>
<p><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241028095609.png"></p>
<p>如上图所示，当输入一个“hello”，预设3个哈希函数，将输出2，5，6，我们把相应位置为 1。假设另一个输入“word”，哈希函数输出6，9，10。此时你应该注意到，索引6已经被先前的“hello”标记了。此时，我们已经使用了”hello“和”word”两个输入值，填充了位向量，当前向量的标记状态为：</p>
<p><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241028095757.png"></p>
<p><strong>查询操作</strong>：</p>
<ol>
<li>当查询一个元素是否在集合中时，使用相同的 k 个哈希函数计算出 k 个哈希值。</li>
<li>检查这 k 个位置的值：<ul>
<li>如果所有对应的位都是 1，则该元素可能在集合中（可能误判）。</li>
<li>如果任何一个位为 0，则该元素肯定不在集合中。</li>
</ul>
</li>
</ol>
<p>前面我们已经添加了两个输入值，这时我们使用3个哈希函数对“搜索的值”进行哈希函数，并查看其生成的索引值。假设，当我们搜索“java”时，3个哈希函数输出的3个索引值分别是5，6，9：</p>
<p><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241028100853.png"></p>
<p>从上图我们可以发现，相应的索引位都被置位 1 ，这意味着我们可以说“java”可能已经插入到集合中。当然明显这是错误的的，产生的原因是由于哈希碰撞导致的巧合而将不同的元素存储在相同的比特位上。好在布隆过滤器有个可预测的误判率（FFP）：</p>
<p><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241028101432.png"></p>
<ul>
<li>n 是已经添加的元素的数量</li>
<li>k 是哈希的次数</li>
<li>m 布隆过滤器的长度（如比特数组的大小）</li>
</ul>
<p>有上可知，在极端情况下，当布隆过滤器没有空闲空间时（满），每一次查询都会返回 true 。这也就意味着 m 的选择取决于期望预计添加元素的数量 n ，并且 m 需要远远大于 n 。</p>
<p>实际情况中，布隆过滤器的长度 m 可以根据给定的误判率（FFP）的和期望添加的元素个数 n 的通过如下公式计算：</p>
<p><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241028101645.png"></p>
<p>了解完上述的内容，我们可以得出一个结论：<strong>当我们搜索一个值的时候，若该值经过 K 个哈希函数运算后的任何一个索引位为 ”0“，那么该值肯定不在集合中。但如果所有哈希索引值均为 ”1“，则只能说该搜索的值可能存在集合中</strong>。</p>
<h4 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="3. 优缺点"></a>3. 优缺点</h4><ul>
<li><p><strong>优点</strong>：</p>
<ul>
<li><strong>空间效率高</strong>：相对于存储实际元素，布隆过滤器所需的内存占用非常少，适合处理大规模数据。</li>
<li><strong>快速查询</strong>：布隆过滤器的查询操作时间复杂度为 O(k)，k 通常是一个小的常数，因此查询速度非常快。</li>
</ul>
</li>
<li><p><strong>缺点</strong>：</p>
<ul>
<li><strong>误判</strong>：布隆过滤器可能会误判元素存在（即返回 true 的情况下，元素实际上不在集合中），无法准确判断。</li>
<li><strong>无法删除</strong>：标准的布隆过滤器不支持删除操作，因为删除某个元素可能会影响其他元素的存在性判断。</li>
</ul>
</li>
</ul>
<h4 id="4-应用场景"><a href="#4-应用场景" class="headerlink" title="4. 应用场景"></a>4. 应用场景</h4><p>布隆过滤器广泛应用于许多场景，特别是在需要快速判断元素存在性且资源有限的情况下，例如：</p>
<ul>
<li><strong>网络爬虫</strong>：用于判断 URL 是否已被访问，避免重复抓取。</li>
<li><strong>数据库</strong>：在执行查询前先检查数据是否存在，以减少对数据库的无效请求。（针对解决缓存穿透的问题）</li>
<li><strong>分布式系统</strong>：在分布式缓存中使用，减少跨节点的请求。</li>
<li><strong>大数据处理</strong>：在数据流处理和实时分析中，快速判断数据是否已处理。</li>
</ul>
<h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><p>布隆过滤器是一种非常实用的数据结构，尤其适用于高效存储和查询大规模数据。尽管它存在误判的风险，但在许多场景中，其空间和时间效率使其成为一种理想的选择。在实际应用中，合理配置哈希函数和位数组的大小，可以有效控制误判率，进一步提升布隆过滤器的性能。</p>
]]></content>
      <tags>
        <tag>redis</tag>
        <tag>缓存问题</tag>
        <tag>布隆过滤器</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 常见使用场景与缓存问题</title>
    <url>/2024/10/20/redis/</url>
    <content><![CDATA[<p>Redis 是一个开源的的内存数据结构存储系统，常用作数据库、缓存和消息代理。它支持多种数据结构，如字符串、哈希、列表、集合等，具备高性能和灵活性。</p>
<h3 id="常见使用场景"><a href="#常见使用场景" class="headerlink" title="常见使用场景"></a>常见使用场景</h3><h3 id="1-缓存"><a href="#1-缓存" class="headerlink" title="1. 缓存"></a>1. 缓存</h3><p>将热点数据存放在内存中，作为缓存对象以加速数据的读取，减轻数据库的负担。这种方法可以显著提高应用的响应速度，尤其是在频繁访问的数据场景中。</p>
<ul>
<li><strong>常见缓存策略</strong>：<ul>
<li><strong>LRU（Least Recently Used）</strong>：淘汰最少使用的缓存数据。</li>
<li><strong>TTL（Time To Live）</strong>：设置缓存数据的有效时间，过期后自动删除。</li>
</ul>
</li>
</ul>
<h3 id="2-会话缓存"><a href="#2-会话缓存" class="headerlink" title="2. 会话缓存"></a>2. 会话缓存</h3><p>可以使用 Redis 来统一存储多台应用服务器的会话信息。通过将会话信息存储在 Redis 中，当应用服务器不再存储用户的会话信息时，系统变得无状态。这意味着用户可以请求任意一台应用服务器，这样更容易实现高可用性和可伸缩性。</p>
<ul>
<li><strong>Redis会话缓存 的优势</strong>：<ul>
<li><strong>持久化</strong>：Redis 提供数据持久化机制（把内存中的数据写到磁盘中去），可以在服务器重启后恢复会话数据。</li>
<li><strong>高并发</strong>：Redis 支持高并发访问，可以处理大量的会话请求。</li>
<li><strong>跨区域访问</strong>：多个服务器可以共享同一份会话数据，方便跨区域部署。</li>
</ul>
</li>
</ul>
<h3 id="3-消息队列（发布-订阅功能）"><a href="#3-消息队列（发布-订阅功能）" class="headerlink" title="3. 消息队列（发布&#x2F;订阅功能）"></a>3. 消息队列（发布&#x2F;订阅功能）</h3><p>Redis 的列表（List）或发布&#x2F;订阅功能，使得系统能够轻松实现消息队列。 虽然 Redis 的 List 是一个双向链表，可以通过 LPUSH 和 RPOP 命令写入和读取消息，但在高并发和复杂场景下，使用专门的消息中间件，如 Kafka 或 RabbitMQ，通常更为合适。</p>
<ul>
<li><strong>Redis List</strong>:<ul>
<li>适合于简单的消息队列实现，易于使用且性能优越。</li>
<li>可以快速处理消息的推送和消费，适合较低并发的场景。</li>
</ul>
</li>
</ul>
<h3 id="4-排行榜"><a href="#4-排行榜" class="headerlink" title="4. 排行榜"></a>4. 排行榜</h3><p>通过 Redis 的有序集合（ZSet），可以实现实时排行榜。每当用户获得新的分数或积分时，只需将该用户的分数更新到有序集合中，Redis 会自动维护排名。这种方式非常高效，可以支持大规模用户的实时排名需求。</p>
<ul>
<li><strong>实现方式</strong>：<ul>
<li>使用 <code>ZADD</code> 命令将用户分数添加到有序集合中。</li>
<li>使用 <code>ZRANGE</code> 或 <code>ZREVRANGE</code> 命令获取排名前 N 的用户。</li>
</ul>
</li>
</ul>
<h3 id="Redis-缓存问题"><a href="#Redis-缓存问题" class="headerlink" title="Redis 缓存问题"></a>Redis 缓存问题</h3><p><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241026155821.png"></p>
<h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透是指客户端请求的数据在数据库中根本不存在，这样缓存永远不会生效，导致请求穿透缓存直接打到数据库，对数据库造成压力。</p>
<p><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241026175234.png" alt="缓存穿透示意图"></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li><p><strong>缓存空对象</strong></p>
<ul>
<li><strong>优点</strong>：实现简单，维护方便。</li>
<li><strong>缺点</strong>：额外消耗内存（针对这个问题一般会设置一个较短的过期时间 TTL）。</li>
</ul>
</li>
<li><p><strong><a href="https://lualvis.github.io/2024/10/20/BloomFilter/">布隆过滤器</a></strong></p>
<ul>
<li>通过使用布隆过滤器，可以在请求到达数据库之前先检查请求的数据是否存在于数据库中，减少无效请求对数据库的压力。</li>
<li><strong>优点</strong>：内存占用少，没有多余key</li>
<li><strong>缺点</strong>：实现复杂，存在误判可能</li>
</ul>
</li>
</ul>
<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指在同一时间段大量的缓存 key 同时失效或者 Redis 服务宕机，导致大量请求直接到达数据库，造成数据库压力过大甚至宕机。这里与缓存击穿的区别在于，缓存击穿是指并发查同一条缓存 key 过期的数据，而缓存雪崩是缓存中大量不同数据同时过期，导致许多请求查不到数据，进而查数据库。</p>
<p><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241026173240.png" alt="缓存雪崩示意图"></p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li><strong>给不同 key 的 TTL 加上一个随机值</strong>（例如 1-5 分钟）。</li>
<li><strong>利用 Redis 集群</strong> 提高服务的可用性。</li>
<li><strong>给缓存业务添加降级限流策略</strong>。</li>
<li><strong>给业务添加多级缓存</strong>。</li>
</ul>
<h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿问题也叫热点 key 问题，就是一个被<strong>高并发</strong>访问并且<strong>缓存重建业务较复杂</strong>的 key 突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p>
<p><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241026182327.png" alt="缓存击穿示意图"></p>
<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241026184306.png"></p>
<ul>
<li><strong>互斥锁</strong><ul>
<li><strong>优点</strong>：<ul>
<li>没有额外的内存消耗</li>
<li>保证了数据的一致性</li>
<li>实现简单</li>
</ul>
</li>
<li><strong>缺点</strong>：<ul>
<li>线程需要等待，性能受影响</li>
<li>可能有死锁的风险</li>
</ul>
</li>
</ul>
</li>
<li><strong>逻辑过期</strong>：<ul>
<li><strong>优点</strong>：线程无需等待，性能较好</li>
<li><strong>缺点</strong>：<ul>
<li>不保证一致性</li>
<li>有额外的内存消耗</li>
<li>实现复杂</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>redis</tag>
        <tag>缓存问题</tag>
      </tags>
  </entry>
</search>
