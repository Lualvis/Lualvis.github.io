<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2024/10/24/redis/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
---
title: Redis 使用场景简介
date: 2024-10-20 16:32:35
tags:
  - redis
  - 缓存问题
---

<p>Redis 是一个开源的的内存数据结构存储系统，常用作数据库、缓存和消息代理。它支持多种数据结构，如字符串、哈希、列表、集合等，具备高性能和灵活性。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h5 id="1-缓存：加速数据的读取，减轻数据库的负担。"><a href="#1-缓存：加速数据的读取，减轻数据库的负担。" class="headerlink" title="1. 缓存：加速数据的读取，减轻数据库的负担。"></a>1. 缓存：加速数据的读取，减轻数据库的负担。</h5><h5 id="2-会话存储：适合存储用户的会话信息。"><a href="#2-会话存储：适合存储用户的会话信息。" class="headerlink" title="2. 会话存储：适合存储用户的会话信息。"></a>2. 会话存储：适合存储用户的会话信息。</h5><h5 id="3-消息队列：利用其发布-订阅特性进行异常的处理"><a href="#3-消息队列：利用其发布-订阅特性进行异常的处理" class="headerlink" title="3. 消息队列：利用其发布&#x2F;订阅特性进行异常的处理"></a>3. 消息队列：利用其发布&#x2F;订阅特性进行异常的处理</h5><h5 id="4-排行榜：通过有序集合实现实时排行榜"><a href="#4-排行榜：通过有序集合实现实时排行榜" class="headerlink" title="4. 排行榜：通过有序集合实现实时排行榜"></a>4. 排行榜：通过有序集合实现实时排行榜</h5><h3 id="Redis-缓存问题"><a href="#Redis-缓存问题" class="headerlink" title="Redis 缓存问题"></a>Redis 缓存问题</h3><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿是指缓存中没有数据库中的数据（一般是缓存时间到期的某条数据），这是由于并发用户特别多，同时读取，缓存没读取到这条数据，又同时去取数据库取数据，引起数据库压力瞬间增大，造成过大压力。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>设置热点数据永不过期：物理不过期，但逻辑过期（后台异步线程去刷新）</li>
<li>加互斥锁，参考代码如下：</li>
</ol>
<h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透是指缓存和数据库中都没有的数据，这样缓存永远不会生效，这些请求都会直接打到数据库，对数据库造成压力。<br><img src="https://gitee.com/Luyseon/blogimage/raw/master/img/20241022220437.png" alt="缓存穿透"></p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指缓存中数据大批的到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。这里与缓存击穿的区别是，缓存击穿是指并发查同一条数据，而缓存雪崩是缓存中大量不同数据都过期了，很多数据查不到从而查数据库。</p>
<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4>]]></content>
  </entry>
</search>
